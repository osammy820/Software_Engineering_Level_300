1. What is a software process model and why is it important in software development?

SOFTWARE PROCESS MODEL

The term software specifies to the set of computer programs, procedures and associated documents 
(Flowcharts, manuals, etc.) that describe the program and how they are to be used.
A software process is the set of activities and associated outcome that produce a software product.
A SOFTWARE PROCESS MODEL is a specified definition of a software process, which is presented from a 
particular perspective. Models, by their nature, are a simplification, so a software process model is 
an abstraction of the actual process, which is being described. Process models may contain activities, 
which are part of the software process, software product, and the roles of people involved in software 
engineering.


WHY SOFTWARE PROCESS MODEL IS IMPORTANT IN SOFTWARE DEVELOPMENT?

The ultimate goal of a process model is to optimise a process. However, there are many benefits that come
along with this practice.
These include:
Provide a clear understanding of how processes work
Create consistency and a way to standardise and control processes
Set clear expectations
Delineates a start and end point of a process
Works to reduce redundancies
Adds a level of accountability



2. COMPARE AND CONTRAST THE WATERFALL AND AGILE SOFTWARE PROCESS MODELS. 

Agile and waterfall are two distinctive methodologies of processes to complete projects or work items. Agile is 
an iterative methodology that incorporates a cyclic and collaborative process. Waterfall is a sequential 
methodology that can also be collaborative, but tasks are generally handled in a more linear process.
Following the agile methodology, your project will move through a series of cycles throughout the lifetime of 
the project. The development phase, review, feedback, and then approval of the work item – either yes or no. 
If yes, implement and complete the task. If no, record and make any necessary changes, track and adjust the 
backlog or prioritization to reflect the newly acquired knowledge, and then move onto the next task or sprint.
Following the waterfall methodology is a simpler process of moving tasks through the phases of defining 
requirements, designing the implementation, implementing the work item, verification of implementation and 
quality assurance, and then maintenance of the feature in the end.
Before delving into what sets Agile and Waterfall apart from each other, there is a list of what they have in 
common below.
They have similar goals, which are to produce high-quality software applications and make clients happy and 
content.
They perform the same activities, which include collecting requirements, designing, developing, testing, and 
deploying.
The foundation of a project involves planning, bringing the project to life, and monitoring the project’s 
progress in the two methodologies.


WHAT ARE THE KEY DIFFERENCES BETWEEN THE TWO MODELS.

The key difference between Agile vs. Waterfall is that Waterfall breaks down software development into isolated 
phases that flow into each other, while Agile advocates iterative development cycles in which multiple lifecycle 
phases can run in parallel.


WHAT ARE THE BENEFITS AND DRAWBACKS OF THE TWO MODELS 

Disadvantages of agile
Scrum is Agile.
Test-driven development is Agile.
Pair programming is Agile.
Open-ended specification is Agile.
It's not a stretch to say even management-by-walking-around and Six Sigma have been relabeled as part of Agile.

Advantages of agile
The Agile approach allows for getting started before all of the design and UX and requirements are completed. 
This allows discovery and changes in course as technical blocks or ideas are discovered. This also allows 
usability testing to be done as parts of the project are done enough to do so which again, allows for course 
corrections in the project. If a fundamental flaw is discovered, or a better idea, it’s relatively cheap to 
change course early on since all the time and money hasn’t been spent on designing the entire application yet.

On an old project where there isn’t much to discover nor design, Waterfall is better because there aren’t going 
to be big surprises nor changes in direction on the project, nothing really to discover, no course directions to 
correct. New features and enhancements might be added, and fixing bugs, but an iterative approach becomes more 
burdensome than is necessary for such a project.

Advantages of waterfall

Everyone gets up to speed quickly
Since technical documentation is a necessary part of the initial requirements phase, this means that everyone 
understands the objectives. New developers can get up to speed quickly – even during the maintenance phase.

Timescales are kept
The phased development cycle enforces discipline. Each step has a clearly defined starting point and conclusion, 
which makes progress easy to monitor. This helps reduce any project “slippage” from agreed timescales.

No financial surprises
Costs can be estimated with a fairly high degree of accuracy once the requirements have been defined.

Disadvantages of waterfall

Needs can be difficult to define
Clients may find it challenging to conceptualise their needs in terms of a functional specification during the 
requirements phase. This means that they may change their minds once they see the end product, which is difficult 
to address if the application needs to be re-engineered to any large extent.

Potential lack of flexibility
There may be issues with the flexibility of the model to cater for new developments or changes of requirements 
which may occur after the initial consultation. Changes due to business plans or market influences may not have 
been taken into account when planning is all done up front.

Longer delivery time
Projects may take longer to deliver, compared to using an iterative 



3. WHAT IS RATIONAL UNIFIED PROCESS (RUP)

The Rational Unified Proces Methodology (RUP) is an agile software development method, in which the life cycle 
of a project, or the development of software, is divided into four phases. Various activities take place during 
these phases: modelling, analysis and design, implementation, testing and application.
RUP is iterative, meaning repeating; and agile. Iterative because all of the process’s core activities repeat 
throughout the project.


HOW DOES IT DIFFER FROM OTHER SOFTWARE DEVELOPMENT PROCESS MODELS

RUP differs from waterfall processes in that the disciplines (Analysis, Design, Coding, Testing etc) are done 
iteratively and concurrently, whereas in waterfall processes, the disciplines are generally done sequentially 
(e.g. Coding only starts once Requirements have been finalized and Design has been accepted


WHAT ARE THE KEY PHASES AND ACTIVITIES INVOLVED IN RUP

The Rational Unified Process (RUP) divides development into the four consecutive phases:
Inception phase
Elaboration phase
Construction phase
Transition phase

Phase 1: Inception
During the first phase, the basic idea and structure of the project are determined. In this phase, the team meets 
regularly to determine the project’s necessity, but also its viability and suitability. Viability and suitability 
also include the expected costs and the means needed to complete the project after the green light has been given.

Phase 2: elaboration
During the elaboration phase, the system’s requirements and its required architecture are assessed and analysed. 
This is where the project begins to take shape. The objective of the elaboration phase is to analyse products and 
to lay a foundation for the future architecture. 

Phase 3: construction
In the construction phase of the Rational Unified Process (RUP), the software system is constructed in its 
entirety. The emphasis is on the development of components and other features of the system.

Phase 4: transition
The objective of the transition phase is to transfer the product to its new user. As soon as the user starts 
using the system, problems almost always arise that require changes to be made to the system. The goal, however, 
is to ensure a positive and smooth transition to the user. 


WHAT ARE THE BENEFITS AND DRAWBACKS OF USING THIS APPROACH IN SOFTWARE DEVELOPMENT Projects

Advantages
It allows us to deal with changing requirements within the project’s development life cycle as per the client or 
customer needs, i.e. it welcomes change.
It supports incremental build the software product.
It provides proper documentation of the software product.
It helps to use the resources efficiently.
It helps to identify issues early in the process life cycle

Disadvantages
It is a complex model to implement as it has multiple stages of the workflow.
It is challenging for organizations to implement which has, small team size or projects.
It should be highly result-oriented from individuals or teams.dee@H









